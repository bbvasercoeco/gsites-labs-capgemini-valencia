<?xml version="1.0" encoding="UTF-8"?>
<Module>
  <ModulePrefs title="TablaPaginada"
  description="Tabla cargada desde docs con paginacion y parametrizada."
  author_affiliation="Capgemini">
<Require feature="idi"/>
<Require feature="locked-domain" />
</ModulePrefs>
  
<UserPref name="_table_query_url" display_name="Data source url" required="true"/>
<UserPref name="_filaDescartadas" default_value="0" display_name="Descartar primeras n filas:" required="true"/>
<UserPref name="_Col" default_value="4" display_name="Escoger primeras n columnas:" required="true"/>
<UserPref name="_NumElemPorPagina" default_value="8" display_name="Número de elementos por página:" required="true"/>
  
<Content type="html"><![CDATA[

<script src="http://www.google.com/jsapi" type="text/javascript"></script>

<div id="tablediv" style="overflow: auto;">
	<img src="http://www.google.com/ig/images/spinner.gif"/>
</div>

<style type="text/css">
	table { border-collapse:collapse; width:100%;}
	table#tablaOculta{visibility:hidden;}
	td, th {  font-family: Arial, Helvetica, sans-serif;  font-size: 10pt;  padding: 2px 0.5em;  white-space: nowrap;}
	td.numeric {  text-align: right;}
	th {  background: blue; color: white; font-size:18px; font-family:Arial;}
	th.mainHeader {  background-color: #808080;  color: #ffffff;  text-align: left;}
	th a {  color: white;  text-decoration: none;}
	th a:visited {  color: white;}
	th a:active, th a:hover { color: #800000; text-decoration: underline;}
        
        tr {background: white; border-bottom: solid #E2E2E2; height: 50px;}
	tr.alternateRow {background: #F3F3F3; border-bottom:solid #E2E2E2; height: 50px;}
        
	.filaUltima{background: white; height: 50px; valign:center; text-align: right;}
		
	/*td.sortedColumn {background-color: #f0f0f0;}
	th.sortedColumn { background-color: #b0b0b0;}
	tr.alternateRow td.sortedColumn { background-color: #d0d0d0; } */
</style>

<script>
    
    

//-----------------------------------------------------------------------------
// sortTable(id, col, rev)
//
//  id  - ID of the TABLE, TBODY, THEAD or TFOOT element to be sorted.
//  col - Index of the column to sort, 0 = first column, 1 = second column,
//        etc.
//  rev - If true, the column is sorted in reverse (descending) order
//        initially.
//
// Note: the team name column (index 1) is used as a secondary sort column and
// always sorted in ascending order.
//-----------------------------------------------------------------------------

function sortTable(id, col, rev) {
  // Get the table or table section to sort.
  var tblEl = document.getElementById(id);

  // The first time this function is called for a given table, set up an
  // array of reverse sort flags.
  if (tblEl.reverseSort == null) {
    tblEl.reverseSort = new Array();
    // Also, assume the team name column is initially sorted.
    tblEl.lastColumn = 1;
  }

  // If this column has not been sorted before, set the initial sort direction.
  if (tblEl.reverseSort[col] == null)
    tblEl.reverseSort[col] = rev;

  // If this column was the last one sorted, reverse its sort direction.
  if (col == tblEl.lastColumn)
    tblEl.reverseSort[col] = !tblEl.reverseSort[col];

  // Remember this column as the last one sorted.
  tblEl.lastColumn = col;

  // Set the table display style to "none" - necessary for Netscape 6 
  // browsers.
  var oldDsply = tblEl.style.display;
  tblEl.style.display = "none";

  // Sort the rows based on the content of the specified column using a
  // selection sort.
  var tmpEl;
  var i, j;
  var minVal, minIdx;
  var testVal;
  var cmp;

  for (i = 0; i < tblEl.rows.length - 1; i++) {

    // Assume the current row has the minimum value.
    minIdx = i;
    minVal = getTextValue(tblEl.rows[i].cells[col]);

    // Search the rows that follow the current one for a smaller value.
    for (j = i + 1; j < tblEl.rows.length; j++) {
      testVal = getTextValue(tblEl.rows[j].cells[col]);
      cmp = compareValues(minVal, testVal);
      // Negate the comparison result if the reverse sort flag is set.
      if (tblEl.reverseSort[col])
        cmp = -cmp;
      // Sort by the second column (team name) if those values are equal.
      if (cmp == 0 && col != 1)
        cmp = compareValues(getTextValue(tblEl.rows[minIdx].cells[1]),
                            getTextValue(tblEl.rows[j].cells[1]));
      // If this row has a smaller value than the current minimum, remember its
      // position and update the current minimum value.
      if (cmp > 0) {
        minIdx = j;
        minVal = testVal;
      }
    }

    // By now, we have the row with the smallest value. Remove it from the
    // table and insert it before the current row.
    if (minIdx > i) {
      tmpEl = tblEl.removeChild(tblEl.rows[minIdx]);
      tblEl.insertBefore(tmpEl, tblEl.rows[i]);
    }
  }
  
  
  
  // Make it look pretty.
//alert('sin lo siguiente funciona');
  makePretty(tblEl, col);
//alert('funciona');



  // Set team rankings.
//  setRanks(tblEl, col, rev);
  // Restore the table's display style.
  tblEl.style.display = oldDsply;
  return false;
}

//-----------------------------------------------------------------------------
// Functions to get and compare values during a sort.
//-----------------------------------------------------------------------------

// This code is necessary for browsers that don't reflect the DOM constants
// (like IE).
if (document.ELEMENT_NODE == null) {
  document.ELEMENT_NODE = 1;
  document.TEXT_NODE = 3;
}

function getTextValue(el) {

  var i;
  var s;

  // Find and concatenate the values of all text nodes contained within the
  // element.
  s = "";
  for (i = 0; i < el.childNodes.length; i++)
    if (el.childNodes[i].nodeType == document.TEXT_NODE)
      s += el.childNodes[i].nodeValue;
    else if (el.childNodes[i].nodeType == document.ELEMENT_NODE &&
             el.childNodes[i].tagName == "BR")
      s += " ";
    else
      // Use recursion to get text within sub-elements.
      s += getTextValue(el.childNodes[i]);

  return normalizeString(s);
}

function compareValues(v1, v2) {

  var f1, f2;

  // If the values are numeric, convert them to floats.

  f1 = parseFloat(v1);
  f2 = parseFloat(v2);
  if (!isNaN(f1) && !isNaN(f2)) {
    v1 = f1;
    v2 = f2;
  }

  // Compare the two values.
  if (v1 == v2)
    return 0;
  if (v1 > v2)
    return 1
  return -1;
}

// Regular expressions for normalizing white space.
var whtSpEnds = new RegExp("^\\s*|\\s*$", "g");
var whtSpMult = new RegExp("\\s\\s+", "g");

function normalizeString(s) {

  s = s.replace(whtSpMult, " ");  // Collapse any multiple whites space.
  s = s.replace(whtSpEnds, "");   // Remove leading or trailing white space.

  return s;
}

//-----------------------------------------------------------------------------
// Functions to update the table appearance after a sort.
//-----------------------------------------------------------------------------

// Style class names.
var rowClsNm = "alternateRow";
var colClsNm = "sortedColumn";

// Regular expressions for setting class names.
var rowTest = new RegExp(rowClsNm, "gi");
var colTest = new RegExp(colClsNm, "gi");

function makePretty(tblEl, col) {

  var i, j;
  var rowEl, cellEl;

  // Set style classes on each row to alternate their appearance.
  for (i = 0; i < tblEl.rows.length; i++) {
   rowEl = tblEl.rows[i];
   rowEl.className = rowEl.className.replace(rowTest, "");
    if (i % 2 != 0)
      rowEl.className += " " + rowClsNm;
    rowEl.className = normalizeString(rowEl.className);
    // Set style classes on each column (other than the name column) to
    // highlight the one that was sorted.
    for (j = 2; j < tblEl.rows[i].cells.length; j++) {
      cellEl = rowEl.cells[j];
      cellEl.className = cellEl.className.replace(colTest, "");
      if (j == col)
        cellEl.className += " " + colClsNm;
      cellEl.className = normalizeString(cellEl.className);
    }
  }

  // Find the table header and highlight the column that was sorted.
  var el = tblEl.parentNode.tHead;
  rowEl = el.rows[el.rows.length - 1];
  // Set style classes for each column as above.
  for (i = 2; i < rowEl.cells.length; i++) {
    cellEl = rowEl.cells[i];
    cellEl.className = cellEl.className.replace(colTest, "");
    // Highlight the header of the sorted column.
    if (i == col)
      cellEl.className += " " + colClsNm;
      cellEl.className = normalizeString(cellEl.className);
  }
}
    
	var pagActual = 1;
	var gadgetHelper = null;
	var _filaDescartadas = 0;
	var _Col = 3;
	var numElePag = 8;
	var totPag = 1;
	var matriz = new Array();
	_IG_RegisterOnloadHandler(loadVisualizationAPI);

function loadVisualizationAPI() {
  google.load("visualization", "1");
  google.setOnLoadCallback(sendQuery);
}

function sendQuery() {
  var prefs = new _IG_Prefs(); // User preferences
  _filaDescartadas = prefs.getInt("_filaDescartadas");
  _Col = prefs.getInt("_Col");
 //var urlTable = prefs.getString("_table_query_url");
  numElePag = prefs.getInt("_NumElemPorPagina");
  gadgetHelper = new google.visualization.GadgetHelper();
 var query = gadgetHelper.createQueryFromPrefs(prefs);
  
	//var opts = {dataType:'jsonp'};
	//var opts = {dataType:'csv'};
	//var query = new google.visualization.Query(urlTable, opts);
	//query.setQuery("select * ");
  
  query.send(handleQueryResponse);
}

function siguientes(){
  pagActual++;
  dibujaTabla();
}

function anteriores(){
  pagActual--;
  dibujaTabla();
}

function handleQueryResponse(response) {
  if (!gadgetHelper.validateResponse(response)) { return; }
  var data = response.getDataTable();
  
	totPag = Math.ceil(data.getNumberOfRows() / numElePag);

alert('1');
	for (var fil = _filaDescartadas+1; fil < data.getNumberOfRows(); fil++) {
  		var formattedValue = "";
		formattedValue += data.getValue(fil, 0);
		if(formattedValue  != ""){
			matriz[fil - _filaDescartadas - 1] = new Array();
            for (var col = 0; col < Math.min(data.getNumberOfColumns(),_Col); col++) {
				var formattedValue = data.getValue(fil, col);
				matriz[fil - _filaDescartadas - 1][col] = formattedValue;
			}
		}
	}
 
alert(matriz[0][0]);
dibujaTabla2();
//  dibujaTabla();
//  dibujaTablaHidden();
  
}

function dibujaTabla2(){

  var html = " ";
  html += '<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">';
  html += '<thead><tr>';

	for (var col = 0; col < matriz[0].length; col++){
    	html += '<th>';
        var enlaceString='<a href=\"#\" onclick=\"javascript:this.blur(); return sortTable(\'offTblBdy\','+col+',true);\"';
        html += enlaceString;
        html +=  ' title=\"';
        html += escapeHtml(matriz[0][col]);
		html += '\">';
        html += escapeHtml(matriz[0][col]);
        //html += '<img src=\"http://gsites-labs-capgemini-valencia.googlecode.com/svn/trunk/JVBtemp/img/t.png\"/>';
        html += '</a></th>';
  }
alert('33');
    html += '</tr></thead>';
    html += '<tbody id=\"offTblBdy\">';
	var inicio = (pagActual - 1) * numElePag;
  	var fin = Math.min(inicio + numElePag, matriz.length);
	//for (var fil = _filaDescartadas+1; fil < data.getNumberOfRows(); fil++) {
	//for (var fil = inicio; fil < fin; fil++) {
	for (var fil = 0; fil < matriz.length; fil++){ 
        //var formattedValue = "";
		
		//formattedValue += data.getFormattedValue(fil, 0);
		//formattedValue += data.getValue(fil, 0);
		
        if(matriz[fil][col] != ""){
            html += '<tr>';
            for (var col = 0; col < matriz[0].length; col++){ 
                html += '<td>';
                    html += matriz[fil][col];
                html += '</td>';
                
            }
			var temString = '</tr>';
            html += temString;
        }
  }
	html += '<tr class="filaUltima"><td colspan="'+_Col +'">';
	if( matriz.length > numElePag){
    	if(pagActual > 1){
	    	html += '<a href="#" onclick="anteriores();"><< Anteriores</a>&nbsp;|&nbsp;';
     	}
     
	 	html += 'P&aacute;gina '+pagActual+' de '+totPag;
		if(pagActual < totPag){
        	html += ' | <a href="#" onclick="siguientes();">Siguientes >></a>';
		}
  }
  html += '</tbody></table>';
  var tableDiv = _gel('tablediv');
  tableDiv.innerHTML = html;
  tableDiv.style.width = document.body.clientWidth + 'px';
  tableDiv.style.height = document.body.clientHeight + 'px';
}

function dibujaTabla(){

  var html = " ";
  html += '<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">';
  html += '<thead><tr>';

  for (var col = 0; col < Math.min(data.getNumberOfColumns(),_Col); col++) {
        //var formattedValue = data.getFormattedValue(_filaDescartadas, col);
var formattedValue = data.getValue(_filaDescartadas, col);
        formattedValue = escapeHtml(formattedValue);
        
        html += '<th>';
        var enlaceString='<a href=\"#\" onclick=\"javascript:this.blur(); return sortTable(\'offTblBdy\','+col+',true);\"';
        html += enlaceString;
        html +=  ' title=\"';
        html += formattedValue+'\">';
        html += formattedValue;
        //html += '<img src=\"http://gsites-labs-capgemini-valencia.googlecode.com/svn/trunk/JVBtemp/img/t.png\"/>';
        html += '</a></th>';
  }

    html += '</tr></thead>';
    html += '<tbody id=\"offTblBdy\">';
	var inicio = ((_filaDescartadas + 1) + ((pagActual - 1) * numElePag));
  	var fin = Math.min(inicio + numElePag,data.getNumberOfRows());
	//for (var fil = _filaDescartadas+1; fil < data.getNumberOfRows(); fil++) {
	for (var fil = inicio; fil < fin; fil++) {
        var formattedValue = "";
		
		//formattedValue += data.getFormattedValue(fil, 0);
		formattedValue += data.getValue(fil, 0);
		
        if(formattedValue  != ""){
            html += '<tr>';
            for (var col = 0; col < Math.min(data.getNumberOfColumns(),_Col); col++) {
                
				//var formattedValue = data.getFormattedValue(fil, col);
				var formattedValue = data.getValue(fil, col);
                formattedValue = escapeHtml(formattedValue);
                html += '<td>';
                    var temp = formattedValue;
                    html += temp;
                html += '</td>';
                
            }
			var temString = '</tr>';
            html += temString;
        }
  }
	html += '<tr class="filaUltima"><td colspan="'+_Col +'">';
	if(data.getNumberOfRows() > numElePag){
    	if(pagActual > 1){
	    	html += '<a href="#" onclick="anteriores();"><< Anteriores</a>&nbsp;|&nbsp;';
     	}
     
	 	html += 'P&aacute;gina '+pagActual+' de '+totPag;
		if(pagActual < totPag){
        	html += ' | <a href="#" onclick="siguientes();">Siguientes >></a>';
		}
  }
  html += '</tbody></table>';
  var tableDiv = _gel('tablediv');
  tableDiv.innerHTML = html;
  tableDiv.style.width = document.body.clientWidth + 'px';
  tableDiv.style.height = document.body.clientHeight + 'px';
}

function dibujaTablaHidden(){
  var html = " ";
  html += '<table id=\"tablaOculta\">';
  html += '<thead><tr>';

  for (var col = 0; col < Math.min(data.getNumberOfColumns(),_Col); col++) {
        //var formattedValue = data.getFormattedValue(_filaDescartadas, col);
		var formattedValue = data.getValue(_filaDescartadas, col);
        //formattedValue = escapeHtml(formattedValue);
        
        html += '<th>';
        var enlaceString='<a href=\"#\" onclick=\"javascript:this.blur(); return sortTable(\'tablaHidden\','+col+',true);\"';
        html += enlaceString;
        html +=  ' title=\"';
        html += formattedValue+'\">';
        html += formattedValue;
        //html += '<img src=\"http://gsites-labs-capgemini-valencia.googlecode.com/svn/trunk/JVBtemp/img/t.png\"/>';
        html += '</a></th>';
  }

 
    html += '</tr></thead>';
    html += '<tbody id=\"tablaHidden\">';

    for (var fil = _filaDescartadas+1; fil < data.getNumberOfRows(); fil++) {
    
        var formattedValue = "";
        //formattedValue += data.getFormattedValue(fil, 0);
		formattedValue += data.getValue(fil, 0);
        if(formattedValue  != ""){
            html += '<tr>';
            for (var col = 0; col < Math.min(data.getNumberOfColumns(),_Col); col++) {
                
                //var formattedValue = data.getFormattedValue(fil, col);
				var formattedValue = data.getValue(fil, col);
				//formattedValue = escapeHtml(formattedValue);
                
                html += '<td>';
                    var temp = formattedValue;
                    html += temp;
                html += '</td>';
                
            }
            html += '</tr>';
        }
  }
 
  html += '</tbody></table>';
  var tableDiv = _gel('tablediv');
  tableDiv.innerHTML = html;
  tableDiv.style.width = document.body.clientWidth + 'px';
  tableDiv.style.height = document.body.clientHeight + 'px';
  
}



function escapeHtml(text) {
  if (text == null) {
    return '';
  }
  return _hesc(text);
}
</script>
]]>
</Content>
</Module>